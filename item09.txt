ITEM 9: PREFER TRY-WITH-RESOURCES TO TRY-FINALLY

java libek szamos rsct tart amelyeket manually kell closolni a close() metodussal. pl. InputStream, OutputStream, java.sql.Connection. rsc closingot clientek gyakran elfelejtik, aminek perf ktge lehet. az emlitett rsck egy resze finalizert haszn safety netkent, de a finalizerek nem muk tul jol (item 8)

korabban a try-finally volt a legjobb mod annak garantalasara h rsc closed lesz, meg exc v return eseten is
BufferedReader br = new BufferedReader(new FileReader(path)); try { return br.readLine(); } finally { br.close(); }
ez meg nem rossz, de egynel tobb rsc pl. InputStream + OutputStream eseten mar ket egymasba agyazott try-finally block van, ami leirva nem szep, es konnyu elrontani is (2007-ben a Java libekben levo metodusok 2/3-anak rossz volt a close() metodusa)

meg a helyesen hasznalt try-finally rsc closing sem tokeletes. mind a try, mind a finally blockban levo kod dobhat exct. pl. a readLine() exct dobhat az underlying fiz device failureje eseten es ekkor a close() hivas uebbol az okbol szinten elfailelhet. ilyenkor a masodik exc felulirja az elsot; az elsonek nem lesz nyoma a stack traceben ami nagyon megneheziti a debuggolast, hiszen alt az elso exct szeretnenk latni. bar lehetne kodot irni ami elsuppressalja a masodik exct de ezt nem igazan szoktak mert verbose

Java 7 behozta a twr-t ami megoldotta ezt. rscnek ehhez az AutoCloseable ifacet kell impl, ami egy db void close() metodust tart. Java libekben ma mar szamos class es iface impl/extendalja
try(BufferedReader br = new BufferedReader(new FileReader(path))) { return br.readLine(); } }
try(InputStream in = new FileInputStream(src); OutputStream out = new FileOutputStream(dst)) { ...

twr nem csak rovidebb es olvashatobb, de jobban is diagnosztizalhato. ha a readLine() es az (invisible) close() is exct dob, akkor az elobbi elsuppressalja az utobbit. sot, akar tobb exc is el lehet suppressalva annak erdekeben h azt az exct lassuk amit szeretnenk. a suppressed exck nem lesznek discardolva, stacktraceben jelzes h suppressalva lettek. Throwable.getSuppressed() metodussal pedig accessalhatoak is

twr-hez is adhatunk catch clauseket, igy kezelhetjuk az excket egy ujabb nesting layer hozzaadasa nelkul
try(BufferedReader br = new BufferedReader(new FileReader(path))) { return br.readLine(); } catch(IOException e) { return defaultVal; } //az eddigi peldakban a try-finallyt ill twr-t tartalmazo metodus mindig throws-olta az IOExceptiont, csak sehol nem irtam ki a metodus headerjet

mindig preferaljuk twr-t a try-finallyval szemben ha olyan rsckkel dolgozunk amiket closolni kell. rovidebb es tisztabb kod, hasznosabb exck