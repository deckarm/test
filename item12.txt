ITEM 12: ALWAYS OVERRIDE TOSTRING

az Object nyujt egy toString() implementaciot, de ennek a kimenete alt nem az amit a mi classunk usere szeretne latni: classnev@unsigned_hex_hashcode, pl. PhoneNumber@163b91. toString() general contractja szerint a returnolt string "a concise but informative representation that is easy for a person to read". a hashcode repr nem tul informativ pl. 707-867-5309-hez kepest. a contract ezen kivul azt mondja h ajanlott minden subclassnak overridelnia

nem annyira kritikus mint az equals() es hashCode() contractok (item 10, item 11), de egy jo toString() impl sokkal hasznalhatobba teszi a classt, a classt haszn syseket pedig jobban debuggolhatova. toString() autom invokolodik ha egy objt atadunk println(), printf(), string concat oper, assert() v ha debugger printeli ki. meg ha nem is hivjuk a toString()-et egy objn, masok megtehetik. pl. egy component ami refel az objunkra, kiloggolja az obj string reprjat; ha nem overridoltuk toString()-et akkor a log nem lesz tul hasznalhato. hasonloan az objt tart colloknal: {Jenny=PhoneNumber@163b91} vs {Jenny=707-867-5309}

egy praktikus toString() impl az obj altal tart minden relevans infot returnoli. ha az obj nagy v a stateje a string repr szempontjabol nem hasznos infot tart, akkor a toString() vmi summaryt returnoljon, pl. "Manhattan residential phone directory (1487536 listings)" v "Thread[main,5,main]". idealisan a string self-explanatory (a Thread pelda pont nem az). ha nem teszunk bele minden relevans infot, az kulonosen test failure reportoknal lehet zavaro: "Assertion failure: expected {abc, 123}, but was {abc, 123}"

egy fontos dontes amit a toString() implkor meg kell hozni h speceljuk-e a return value formatjat a docban. value classokra, mint pl. phone nr v matrix, javasolt. elonye h az obj standard, unambigous, olvashato reprjakent szolgal. ez a repr hasznalhato IO-ban, es persistent, olvashato data objkban pl. csv fileok. alt jo otlet lehet egy static factory/konstr amelynek segitsegevel az obj es a string reprja kozt oda-vissza lehet forditani. Java platform libekben levo szamos class haszn ilyet, pl. BigInteger, BigDecimal, legtobb boxed primitive class

a toString() return value format specelesenek hatranya h ezt kovetoen orokre az marad. a classunkat haszn prgozok parsereket fognak irni ra, persistent databa fogjak embeddelni stb. es ha egy kesobbi releaseben megvaltoztatjuk a reprt akkor nem fognak orulni. ha nem speceljuk a formatot azzal megorizzuk a flexet es kesobbi relasekben tovabbi infot adhatunk hozza v improvolhatjuk

akar speceljuk a formatot akar nem, docolnunk kell. spec eset: "The string consists of twelve characters whose format is "XXX-YYY-ZZZZ" stb. nem spec eset: " Returns a brief description of this potion. The exact details of the representation are unspecified and subject to change but the following may be regarded as typical: "[Potion #9: type=love, smell=turpentine, look=india ink]" stb.

toString() altal returnolt valueban levo infohoz mindig nyujtsunk accesst. pl. PhoneNumber classban legyen accessor area codera, prefixre, line numberre. hanem nyujtunk akkor a classunkat haszn prgozoknak fel kell parsolnia a stringet. ez perf--, folosleges munka a prgozoknak, error-prone process, es fragile sysekhez vezet amik eltorhetnek ha megvaltoztatjuk a formatot. ha nem nyujtunk accessorokat, azzal tulkepp APIva tesszuk a string formatot, meg akkor is ha azt mondjuk rola h subject to change

static util classban (item 1) nincs ertelme toString()-et irni. enum typeokban (item 34) szinten nincs, mert a Java megfelelot nyujt ra. de irjunk minden abstract classba amelynek subclassai egy common string reprt sharelnek. pl. a legtobb coll impl az abstract coll classoktol orokli a toString()-jet

item10-ben emlitett AutoValue tud toString()-et generalni, csakugy mint a legtobb IDE. ezek jol megjelenitik a fieldek contentjet, de a class "jelenteserol" semmit nem mondanak. pl. a PhoneNumber classra nem jo otlet generalt toString() metodust haszn (mivel a telszamoknak standard string reprja van), de pl. a fenti Potion classra teljesen OK. ezzel egyutt egy generalt toString() metodus meg mindig jobb mint az Object-tol orokolt, ami semmit nem mond az obj valuejarol

summary: overridoljuk az Object toString() metodusat minden instantiable classunkra, hacsak egy superclass nem tette ezt mar meg. igy a class konnyebben hasznalhato, es konnyebb debuggolni. toString() az obj egy tomor, hasznos leirasat nyujtja, esztetikusan megfelelo formatumban