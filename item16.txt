ITEM 16: IN PUBLIC CLASSES, USE ACCESSOR METHODS, NOT PUBLIC FIELDS

neha kesztetest erzunk degeneralt classok irasara amelyeknek nincs mas celja mint instance fieldek groupolasa
class Point { public double x; public double y;

mivel az ilyen classok data fieldjei direktben accessalhatoak, nincsenek meg az encaps benefitjei (item 15). nem valtoztathatjuk meg a reprt az API valt nelkul, nem enforcolhatjuk az invariantokat, es nem vegezhetunk auxiliary (kisegito) actionokat ha a fieldet accessaljak. hardcore OO prgozok szerint az ilyen classok rosszak es mindig olyan classokat kell haszn ahol private fieldek es public accessor metodusok (getterek) vmint mutable classok eseten mutatorok (setterek) vannak
class Point { 
  private double x;private double y; 
  public Point(double x, double y) { this.x = x; this.y = y; }
  public double getX() { return x; } public double getY() { return y; }
  public void setX(double x) { this.x = x; } public void setY(double y) { this.y = y; }

public classok eseteben ez igy OK: ha egy class a packagejen kivul is accessible, akkor nyujtsunk accessor metodusokat h megorizzuk a flexet arra h meg tudjuk valt a class internal reprjat. ha public class exposolja a data fieldjeit akkor a repr megvalt eselye elvesz, mert a client kod "can be distributed far and wide" (?)

de ha egy class package-private v private nested class, akkor nem okvetlenul rossz a data fieldjeit exposolni - amennyiben a feladatuk a class altal nyujtott abstraction leirasa. ez kevesebb vizualis cluttert general mint az accessoros approach, mind a classban mind a client kodban. bar a client kod ossze lesz kapcsolva a class internal reprjaval, es a kod be van confinolva a classt tart packagebe. ha repr valt lesz szukseges akkor ez megteheto anelkul h packagen kivuli kodhoz kellene nyulni. private nested class eseten a valt scopeja tovabb restrictolhato az enclosing classra

Java platform lib szamos classa violalja azt h public classoknak nem kellene direktben fieldeket exposolnia. pl. jawa.awt Point es Dimension classai. ezek tekinthetok figyelmeztetesnek h mit ne csinaljunk. item 67 leirja h vezetett a Dimension internaljainak exposolasa egy ma is fennallo perf probhoz

bar sosem jo otlet ha egy public class direktben exposol fieldeket, kevesbe karos ha a fieldek immutok. nem valthatjuk meg egy ilyen class reprjat az API valt nelkul, es nem nem vegezhetunk auxiliary actionokat ha a fieldet readelik, de enforcolhatjuk az invariantokat
public final class Time { 
  private static final int HOURS_PER_DAY = 24; private static final int MINUTES_PER_HOUR = 60;
  public final int hour; public final int minute;
  public Time(int hour, int minute) { if(hour < 0 || hour >= HOURS_PER_DAY) throw new IllegalArgumentException(); /* minutes uigy */ this.hour = hour; this.minute = minute;

summary: public classok ne exposoljanak mutable fieldeket. kevesbe karos, de szinten kerdeses h public classok immut fieldeket exposoljanak. neha lehet kivanatos h package-private v private nested classok (mutable v immut) fieldeket exposoljanak 
