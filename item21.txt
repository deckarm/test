ITEM 21: DESIGN INTERFACES FOR POSTERITY

Java 8 elott nem lehetett ifacekhez metodusokat adni anelkul h ne breakeljuk az existing implkat. ha megtettuk, az existing implkban compile error lett mert hianyzott beloluk ez a metodus. Java 8-ban bejott a default metodus erre a celra. de existing ifacekhez uj metodust adni risk

default metodus dekl egy default implt tart; ezt haszn minden class amely impl az ifacet de nem impl a default metodust. default metodusok lehetove teszik h existing ifacehez metodust adjunk, de nem garantalt h ezek a metodusok minden preexisting implban muk fognak. a default metodusok "beinjektalodnak" az existing implkba, anelkul h az implementalok tudnanak errol. Java 8 elott az implk abban a tudatban keszultek, h az ifacekbe sosem kerulnek uj metodusok

Java 8-ban szamos uj default metodus kerult a core coll ifacekbe, fokent a lambdak kihasznalasara (ch 6). a Java libekben levo default metodusok alt high-qual, default-purpose implk, es alt jol muk. de nem mindig lehetseges olyan default implt irni ami minden letezo impl osszes invarjat maintaineli

pl. Collection iface Java 8-ban hozzaadott removeIf() metodusa. removol minden elemet amelyre egy adott boolean func (predicate) truet returnol. a default impl az iteratoraval traversal vegig a collon, minden elemen invokolja a predicatet es az iterator remove() metodusaval removolja azokat az elemeket amelyekre a predicate truet returnol
ez valszeg a leheto legjobb general-purpose impl amit removeIf() metodusra lehet adni, de sajnos egyes Collection implkban failel. pl. org.apache.commons.collections4.collection.SynchronizedCollection; hasonlo ahhoz amit a java.util.Collections.synchronizedCollection() static factory returnol. az Apache impl emellett lehetove teszi h egy client-supplied objt haszn lockingra, es ne magat a collt. maskent, ez egy wrapper class (item18) amelynek metodusai egy locking objra syncelnek mielott delegalnanak a wrapped collnak

az Apache SynchronizedCollection class aktivan maintainelt, de a konyv idopontjaban nem overridolja a removeIf() metodust. ha a classt Java 8-al hasznaljak, akkor a removeIf() default impljat fogja orokolni, ami pedig nem teljesiti a class alapjat jelento contractot miszerint autom sync minden metodus invocation korul. a default impl semmit nem tud a syncrol es nincs accesse a locking objt tart fieldhez. ha egy client removeIf()-et hiv egy SynchronizedCollection  instanceon, mikozben a collt egy masik thread conc modifolja, abbol ConcurrentModificationException v egyeb unspec behav lehet

h ezt Java platform lib implkban, pl. a Collections.synchronizedCollection() altal returnolt package-private classban elkeruljek, a JDK maintainereknek overridolniuk kellett a default removeIf() implt es egyeb hasonlo metodusokat h vegrehajtsak a szukseges syncet mielott invokolnak default implt. de a Java platformon kivuli preexisting coll implk egy resze meg nem reagalt az iface valtra

ha vannak default implk, akkor egy iface existing impljai error/warning nelkul compilolhatnak, viszont runtime failelhetnek. nem gyakori, de elofordul. Java 8-ban a coll ifacekhez adott egyes metodusokrol ismert h ilyen problemat okozhatnak, es jopar existing impl erintett

default metodusokat hasznalni arra h uj metodusokat adjunk existing ifacekhez nem javasolt, hacsak nem elkerulhetetlen, es ekkor is at kell gondolni h existing implk nem breakelnek-e a default metodus impl kovetkezteben. viszont uj iface krealasakor a default metodusok nagyon hasznosak standard metodus impl nyujtasara (item 20)

default metodusokat nem arra talaltak ki h metodusokat removoljunk ifacekbol v existing metodusok signaturejet valt meg. ezek az iface valtk nem lehetsegesek anelkul h existing clientek ne breakeljenek

az uzenet vilagos: bar a default metodusok most mar a Java platform reszei, tovabbra is nagyon kell figyelni az iface designkor. bar default metodusok lehetove teszik h metodusokat adjunk existing ifacekhez, ez risk. ha egy ifaceben minor flaw van, az orokre irritalhatja a usereket; ha egy iface deficient az tonkrevaghatja az ot tart APIt

ezert kritikus tesztelni minden uj ifacet releaseles elott. tobb prgozonak le kell impl minden ifacet kul modokon. torekedjunk min harom klf implra. hasonloan fontos tobb client prgt irni amelyek az uj ifacek instanceait klf taskok vegrehajtasara haszn. ezzel bizt h az ifacek telj a megcelzott hasznalatot; es eszrevehetjuk az ifacekben levo flawkat mielott releaselnenk oket. bar egyes flawkat meg az iface release utan is lehet javitani, de erre ne alapozzunk
