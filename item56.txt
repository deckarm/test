ITEM 56: WRITE DOC COMMENTS FOR ALL EXPOSED API ELEMENTS

hasznalhato APInak docolva kell lennie. az API docokat korabban manualisan generaltak, es syncben kellett tartani a koddal. Java prg env a Javadoc util segitsegevel megkonnyiti ezt; autom generalja az API docot a srcbol, spec formatted doc commentekkel

a doc commentek nem reszei a nyelvnek, de egy de facto APIt jelentenek amit minden Java prgozonak ismernie kell. a conventionok le vannak irva a "How to Write Doc Comments" weboldalon. ezt Java 4 ota nem updateltek, de igy is hasznos rsc. Java 9-ben kerult be az {@index}, Java 8-ban az {@implSpec}, Java 5-ben pedig a {@literal} es a {@code}. ezek a weboldalon nem szerepelnek, de ebben az itemben targyaljuk oket

API megfelelo docolasahoz minden exported classt, ifacet, konstrt, metodust es field deklt egy doc comment kell megelozzon. ha egy class serializable, akkor a serialized formajat is le kell docolni (item 87). doc comment nelkul a Javadoc csak annyit tenni h reprodukalja a deklt az erintett API element docjakent. APIt doc commentek nelkul haszn frusztralo es error-prone. public classok ne haszn default konstrt, mert ezekhez nem lehet doc commentet nyujtani. maintainalheto kodhoz doc commenteket kell irnunk a legtobb unexported classhoz, ifacehez, metodushoz es fieldhez is, bar ezeknek nem kell annyira reszletesnek lenniuk mint az exported API elementeknel

egy metodus doc commentjenek tomoren le kell irnia a contractot a metodus es clientje kozott. az inheritancre designolt metodusok (item 19) kivetelevel a contractnak azt kell elmondania h mit csinal a metodus, es nem azt h hogyan. a doc commentnek fel kell sorolnia a metodus osszes precondjat, ezek azok a dolgok amelyeknek truenak kell lennie ahhoz h egy client invokolni tudja, es a postcondjait, ezek azok a dolgok amelyek truek lesznek miutan az invocation sikeresen veget ert. tip a precondokat impliciten az unchecked exckra von @throws tag irja le; minden unchecked exc egy precond violationnak felel meg. precondok megadhatok a kapcsolodo paramok @param tagjeben is

precondok es postcondok mellett a metodusoknak docolnia kell az esetleges side effecteket is. side effect egy olyan observable valtozas a sys stateben, ami nem szukseges a postcond eleresehez. pl. ha egy metodus egy bg threadet indit, azt docolni kell

metodus contract full docolasahoz a doc commentnek minden paramhoz tart kell egy @param taget, egy @return taget amennyiben a metodusnak nem void a return typeja, es egy @throws taget minden a metodus altal dobott exchez fgtl h checked v unchecked (item 74). ha a @return tagben levo szoveg azonos lenne a metodus leirasaval, akkor kihagyhato, fuggoen a kovetett coding standardektol

konv szerint a @param es @return tageket koveto szovegnek egy noun phrasenek kell lennie, amely a param v a return value altal repr valuet irja le. neha lehet aritm exprkat is haszn; peldakert ld. BigInteger. @throws taget koveto szovegnek tart kell az "if" szot, azt kovetoen pedig egy clauset amely leirja a conditionokat amelyek mellett az exc dobodik. konv szerint a @param, @return, @throws taget koveto phrase v clause vegen nincs pont
(pelda doc)
html tagek is vannak benne. Javadoc a doc commenteket htmlbe forditja, es a doc commentekben levo html elementek bekerulnek a vegso html documentbe. prgozok neha html tableket is embeddelnek a doc commentjeikbe, bar ez ritka

* @throws IndexOutOfBoundsException if the index is out of range
*         ({@code index < 0 || index >= this.size()})
Javadoc {@code} tagnek ket celja van: a code fragment a code fonttal lesz kirenderelve es suppressalja a code fragmentben a html markup es nested Javadoc tagek processalasat. az utobbi teszi lehetove pl. a < hasznalatat a code fragmentben, ami egyebkent egy html metachar. ha tobbsoros kodot akarunk tenni egy doc commentbe akkor haszn a Javadoc {@code} taget egy html <pre> tagbe wrappelve. maskent, a kod elott legyen "<pre>{@code", utana pedig "}</pre>". ez megorzi a kodban levo line breakeket es nem kell escapelnunk a html metacharokat; ez nem von a @ charra amit escapelnunk kell ha a kodban annok vannak

vegul vegyuk eszre a "this list" megfogalmazast a szovegben. konv szerint a "this" szo arra az objra von, amin a metodus invokolodik, amennyiben ez egy instance metodus doc commentje

item 15 szerint, ha inheritancere designolunk egy classt akkor docolnunk kell a self-use patternjeit, h a prgozok tudjak a metodusok overriding semanticsjet. ezeket a self-use patterneket a Java 8 @implSpec taggel kell docolni. emlekezzunk vissza h a normal doc commentek a metodus es a clientjei kozti contractot irjak le; az @implSpec commentek viszont a metodus es a subclassa kozti contractot, ezzel lehetove teve a subclassoknak "to rely on implementation behavior" ha oroklik a metodust v meghivjak superrel
* @implSpec
* This implementation returns {@code this.size() == 0}.
Java 9-ben a Javadoc meg ignoralja az @implSpec taget, -tag "implSpec:a:Implementation Requirements:" command line switch taget kell megadnunk; ezt remelhetoleg kesobbi releasekben megoldjak

ne felejtsuk el h html metacharokat (<, >, &) tart doc generalasahoz spec actionok kellenek. legjobb ezeket ugy belegeneralnia  docba h korulvesszuk oket a {@literal} taggel, amely suppressalja a html markup es a nested Javadoc tagek processalasat. ez olyan mint a {@code} tag, csak nem a code fontban rendereli ki a kodot
* A geometric series converges if {@literal |r| < 1}.
ez a Javadoc fragment a "A geometric series converges if |r| < 1." docot generalja. a {@literal} taget lehetett volna csak a < kore tenni, es uez lett volna a kimenet, csak a doc comment nehezebben lenne olvashato a src kodban. ez illusztralja azt az alt principlet h a doc commenteknek a src kodban es a generalt docban is olvashatonak kell lenniuk. ha nem tudjuk mindkettot elerni akkor a generalt doc olvashatosaga a prio

minden doc comment elso "sentence" lesz a commenthez kapcs element summary descriptionje. ennek onmagaban le kell tudnia irnia az element functionalityjet. confusion elkerulese miatt egy classban v ifaceben levo ket member v konstr summary descrja nem lehet uaz. kulonosen figyeljunk az overloadingokra, mert ezeknel gyakran termeszetesnek tunhetne uazt az elso sentencet hasznalni

legyunk ovatosak ha a summary descr pontot tart, mert a pont prematurely terminalhatja a descrt. pl. egy doc comment ami ugy kezdodik h "A college degree, such as B.S., M.S. or Ph.D." le lesz vagva az M.S. utan, mert a summary descr vegeter azt elso olyan pontnal ami utan space, tab v line terminator kov (v az elso block tagnel). a legjobb mo ha a problemas pontot es a kapcsolodo szoveget korbevesszuk egy {@literal} taggel, igy a pontot mar nem space fogja kovetni a src kodban
* A college degree, such as B.S., {@literal M.S.} or Ph.D.

egy kicsit felrevezeto azt mondani h a summary descr az elso "sentence" a doc commentben. konv azt diktalja h ez ritkan lesz egy teljes sentence azaz mondat. metodusok es konstrk eseteben a summary descrnak egy verb phrasenek kell lennie ami a metodus altal vegrehajtott actiont irja le. pl. Collection.size() eseteben "Returns the number of elements in this collection.". amint latjuk, ez harmadik szemelyu deklarativ modot haszn ("returns the number") es nem masodik szemelyu imperativot ("return the number")

classok, ifacek es fieldek eseteben a summary descrnak noun phrasenek kell lennie, amely leirja azt a dolgot amit a class v iface egy instance, v maga a field repr. pl. Instant eseteben "An instantaneous point on the time-line."

Java 9-ben a Javadoc altal generalt htmlbe bekerult egy client-side index. ez megkonnyiti a nagy API doc setekben valo navigalast, a page jobb felso sarkaban levo search box segitsegevel. ha beirunk ebbe a boxba, akkor egy drop-down menut kapunk a matchelo pagekbol. API elementek, mint a classok, metodusok es fieldek autom indexelodnek. neha lehet h indexelni akarunk tovabbi termeket is, amelyek az API szempontjabol fontosak. erre a celra valo a {@index} tag, ebbe kell bewrappelni a doc commentben levo termet ha indexelni akarjuk
* This method complies with the {@index IEEE 754} standard.

genericekre, enumokra es annokra kulonosen figyelni kell a doc commentekben. ha generic typeot v metodust docolunk, akkor minden type paramot docolni kell
* @param <K> the type of keys maintained by this map
* @param <V> the type of mapped values

enum type docolasakor docoljuk a constantokat, csakugy mint a typeot es bmilyen public metodust. ha egy doc comment rovid, akkor akar egyetlen sorba is kerulhet
/** Woodwinds, such as flute, clarinet, and oboe. */
WOODWIND,

anno type docolasakor docoljunk minden membert, csakugy mint magat a typeot. membereket noun phraseokkal docoljuk, mintha csak fieldek lennenek. a type summary descrjara haszn egy verb phraset ami leirja h mit jelent ha egy prg elementen ilyen typeu anno van
(pelda doc)

package-level doc commenteknek egy package-info.java nevu fileban kell lenniuk. ezeken a commenteken kivul a filenak tart kell egy package deklt es tarthat annokat is ezen a dekln. hasonloan, amennyiben haszn a module syst (item 15) akkor a module-level commenteknek a module-info.java fileba kell kerulniuk

az API ket aspectje, amit a docbol gyakran kifelejtenek, a thread-safety es a serializability. class v static metodus thread-safety leveljet le kell docolni, ld. item 82. ha egy class serializable, akkor le kell docolni a serialized formajat, ld. item 87

Javadoc "orokolni" tudja a metodus commenteket. ha egy API elementnek nincs doc commentje, akkor a Javadoc megkeresi a legspecificebb alkalmazhato doc commentet, ifaceket preferalva a superclassokkal szemben. The Javadoc Reference Guide leirja a search algo reszleteit. doc commentek reszei is orokolheto supertypeokbol a {@inheritDoc} tag segitsegevel. ez tobbek kozt azt jelenti, h a classok reusolhatnak doc commenteket az altaluk impl ifacekbol, es nem kell ezeket lemasolniuk. ez megkonnyiti a majdnem identical doc commentek maintaineleset, de nem egyszeru haszn, es vannak limitationjai is. nem fogl vele reszleteiben

caveat: doc commentet nyujtani az exported API elementekhez szukseges, de nem elegseges. tobb interrelated classbol allo komplex APInal a doc commentek melle kell egy external doc is ami leirja az API archjat. ha van ilyen doc, akkor a class v package docnak tart kell ra a linket

Javadoc autom csekkeli az itt leirt ajanlasok jo reszenek betartasat. Java 7-ben a -Xdoclint command line switch kellett hozza, Java 8-tol default. IDE pluginek, mint pl. a checkstyle meg szelesebb korben csekkelnek. doc commentekben elofordulo esetleges errorok vge csokkentheto ha a Javadoc altal krealt html fileokat atfuttatjuk vmi html validity checkeren. ez detektalja a html tagek helytelen hasznt. szamos ilyen checker letoltheto, ill. tudunk a weben is validalni a W3C markup validation servicel. generalt html validalasanal emlekezzunk h Java 9-ben a Javadoc tud html5 es html4.01 is generalni, utobbi a default. -html5 command line switchel jelezhetjuk ha html5 akarunk

az itt leirt konvk az alapok. bar mar 15 eves, a doc commentek irasanak fo forrasa tovabbra is a How to Write Doc Comments

ha betartjuk az itt leirt guidelineokat, a generalt docnak egy tiszta leirast kell nyujtania az APInkrol. az egyetlen biztos mod errol megbizonyosodni ha atolvassuk a Javadoc altal generalt webpageket. ezt megeri megtenni minden APIra amit masok is haszn fognak. ahogy egy prg tesztelese szinte biztosan vmi valtozast fog eredmenyezni a prgban, a doc atolvasasa szinte biztosan legalabb vmi minor valtozast fog eredmenyezni a doc commentekben

summary: doc commentek a legjobb, leghatekonyabb modja az API docolasanak. hasznalatuk kotelezonek tekintheto minden exported API elementre. kovessunk egy konz stilust ami illeszkedik a standard konvkhoz. emlekezzunk h lehet html haszn a doc commentekben, es a html metacharokat escapelni kell

