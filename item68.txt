ITEM 68: ADHERE TO GENERALLY ACCEPTED NAMING CONVENTIONS

Java platformban joldef naming conv van, aminek nagy reszet tart a JLS. naming convok alapvetoen ket kategoriaba tart: typographical es grammatical

typogr naming convbol nem sok van, packagekre, classokra, ifacekre, metodusokra, fieldekre es type varokra von. ezeket ritkan szabad violalni, es erre mindig jo ok kell legyen. ha egy API violalja oket, azt nehezen lehet haszn. ha egy impl violalja oket, azt nehezen lehet maint. mindket esetben a viok osszezavarhatjak a prgozokat, es hibas feltetelezesekhez vezethetnek amik errorokat okozhatnak. ez az item ofoglalja a convkat

package es module neveknek hier kell lennie, componenteket pontok val el. componenteknek kisbetukbol kell allniuk, digitek csak ritkan. bmely package neve, amelyet a sajat orgunkon kivul fognak haszn, az orgunk megforditott Internet domain nevevel kell kezd, pl. edu.cmu, com.google, org.eff. standard libek es optional packagek, amelyek neve java-val v javax-el kezdodik, kivetelek ez alol. userek nem krealhatnak olyan packageket v moduleokat amelyek neve igy kezd. JLS tart a reszletes ruleokat Internet domain nevek package namekke konvertalasara

package nev maradeka egy v ket componentet tart, ami leirja a packaget. componenteknek rovidnek kell lennie, alt 8 v kevesebb char. meaningful roviditesek javasoltak, pl. utilities helyett util. acronymok elfogadottak, pl awt. componentek alt egy szobol v roviditesbol alljanak

szamos package neveben csak egy component van az Internet domain neven tul. tovabbi componentek elfogadottak large facilityknel, amelyek merete indokolja h vmi informal hierbe legyenek darabolva. pl. a java.util package egy sokelemu package hiert tart olyan nevekkel mint pl. java.util.concurrent.atomic. az ilyen packageket subpackagenek nevezik, bar nem igazan van nyelvi tam package hierekhez

class es iface nevek, beleertve az enum es anno type neveket, egy v tobb szobol allnak, minden szo elso betuje nagy, pl. List, FutureTask. roviditesek kerulendoek, kiveve acronymok v egyes common roviditesek mint max v min. arrol vita van h az acronymeknek vegig nagybetuseknek kell lenniuk v csak az elso betujuk legyen nagy. egyes prgozok vegig nagybetut haszn, de eros arg arra h csak az elso betu legyen nagy: ha ket acronym van egymas mellett akkor is meg kell tudnunk mondani h hol vegzodik az elso, es hol kezdodik a masodik. HTTPURL vs HttpUrl?

metodusok es field nevek uazokat a typogr convokat kovetik mint a class es iface nevek, kiveve h a metodus v field nev elso betuje kicsi, pl. remove v ensureCapacity. ha egy acronym egy metodus v field nev elso szavakent szerepel, akkor kisbetusnek kell lennie

az elzo rule aloli egyetlen kivetel a "constant fieldek" amelyek neve 1 v tobb nagybetus szobol all, amelyeket underscore valaszt el, pl. VALUES v NEGATIVE_INFINITY. constant field egy static final field amelynek valueja immut. ha egy static final field typeja primitive v immut ref type (item 17) akkor az egy constant field. pl. az enum constantok constant fieldek. ha egy static final fieldnek mut ref typeja van, az attol meg lehet constant field, ha a refelt obj immut. vegyuk eszre h a constant fieldek ez egyetlenek ahol azt underscore haszn ajanlott

local var nevekre hasonlo typogr convok von mint member nevekre, kiveve h roviditesek megengedettek, csakugy mint az indiv charok es rovid charseqek amelyek jelentese ctxtol fuggo, pl. i, denom, houseNum. az input paramok spec local varok. ovatosabban kell elnevezni oket mint a normal local varokat, mivel a neveik a metodus docjuknak lenyeges reszei

type param nevek alt egy charbol allnak. leggyakrabban az alabbiak: T tetszoleges typera, E coll element typere, K es V map key es value typere, X excra. function return typeja alt R. tetszoleges typeok seqja lehet T,U,V v T1,T2,T3

gramm naming convok flexebbek es ellentmondasosabbak mint a typogr convok. packagekre von nincsenek megemlitendo gramm convok. instantiable classok, beleertve enum typeokat, alt egy nounnal v noun phraseel vannak elnevezve, mint Thread, PriorityQueue v ChessPiece. non-instantiable util classok (item 4) gyakran tobbesszamu nounnal, mint Collectors v Collections. ifacek uugy mint a classok, pl. Collection v Comparator, v adjective ending mint -able/-ible, pl. Runnable, Iterable, Accessible. mivel az anno typeoknak szamos haszn esete van, ezert ezekre nounok (fonev), verbek (ige), prepositionok (eloljaro) es adjectivek (melleknev) is gyakoriak, pl. BindingAnnotation, Inject, ImplementedBy, Singleton

metodusok amelyek vmilyen action hajtanak vegre alt vmi verbbel v verb phraseal (including object - targy?) vannak elnevezve, pl. append v drawImage. metodusok neve amelyek boolean valuet returnolnek, alt is- v esetleg has- kezdodik, amit kovet egy noun, noun phrase v bmilyen szo v phrase ami adjectivekent szolgal, pl. isDigit, isProbablePrime, isEmpty, isEnabled, hasSiblings

metodusok neve amelyek "non-boolean function or attribute of the object on which they’re invoked" returnolnek, alt noun, noun phrase v get-tel kezdodo verb phrase, pl. size, hashCode v getTime. van egy hangos kontingens akik szerint csak a get-tel kezdodo forma elfogadhato, de ennek keves alapja van. az elso ket forma alt jobban olvashato kodhoz vezet, pl. if(car.speed() > 2* SPEED_LIMIT) generateAlert();

a get-tel kezdodo forma gyokerei a mara nagyreszt obsolete JavaBeans specben vannak, amely egy korai reusable component arch alapja volt. vannak modern toolok amelyek tovabbra is ennek a naming convjain alapulnak, es haszn ezt nyugodtan bmilyen kodban amelyek ezekkel a toolokkal egyutt vannak haszn. szinten eros precedens erre a naming convra ha egy class tart gettert es settert is tart uarra az attributumra. ebben az esetben a ket metodus neve tip getAttribute es setAttribute

par metodusnev spec emlitest erdemel. instance metodusok neve amelyek egy obj typejat konvertaljak, es egy mas typebeli objt returnolnek, alt "toType", pl. toString v toArray. metodusok neve amelyek viewt (item 6) returnolnek, amelyek typeja kul a receiving objetol, gyakran "asType", pl. asList. metodusok neve, amelyek egy olyan primitivet returnolnek, amelynek value uaz mint az obje, amelyen invokolva vannak, gyakran "typeValue", pl. intValue. static factoryk nevei gyakran from, of, valueOf, instance, getInstance, newInstance, "getType" es "newType" (item 1)

field nevekre von gramm convok kevesbe bejaratottak, es kevesbe fontosak mint a class, iface es metodus nevek eseteben, mivel a jol designolt APIk alt keves v 0 exposolt fieldet tart. boolean typeu fieldek nevei gyakran hasonloak mint a boolean accessor metodusoke, az is kivetelevel, pl. initialized, composite. mas typeu fieldek nevei alt nounok v noun phrasek, pl. height, digits, bodyStyle. local varokra von gramm convok hasonloak mint a fieldeknel, csak meg gyengebbek

summary: tanuljuk meg a standard naming convokat es haszn oket. typogr convok straightfwdok es tobbnyire unambiguousak; gramm convok komplexebbek es lazabbak. JLS szerint: "ne kovessuk szolgaian ezeket a convokat, ha hosszu ideje mas convt haszn". haszn common senset
