ITEM 72: FAVOR THE USE OF STANDARD EXCEPTIONS

expertek es kevesbe taasztalt prgozok kozti egyik kul, h az elobbiek olyan kodot probalnak irni ami reusolhato. nem kivetelek ez alol az exck sem. Java libek szamos exct nyujtanak amelyek lefedik a legtobb API exc-dobasi igenyeit

standard exck reusolasanak szamos benefitje van. legfontosabb h az APInk igy konnyebben megtanulhato es hasznalhato, mivel a prgozok szamara mar ismeros konvkat haszn. szinten fontos h az APInkat haszn prgok konnyebben olvashatoak, mivel nincsenek teleclutterelve ismeretlen exckkal. vegul (legkevesbe fontos), kevesebb exc class kisebb mem footprintet es class loading idot jelent

leggyakrabban reusolt exc type az IllegalArgumentException (item 49). alt ezt az exct kell dobni ha a hivo egy olyan argot ad be amelynek valueja nem megfelelo. pl. ezt kell dobni ha a hivo egy negativ szamot adna be egy olyan paramba ami azt repr h egy actiont hanyszor kell vegrehajtani

masik gyakran haszn exc az IllegalStateException. alt ezt az exct kell dobni ha az invocation illegal, a receiving obj stateje miatt. l. ezt kell dobni ha a hivo azelott probalna haszn vmilyen objt mielott az megfeleloen initelve lenne

vitathato ugyan, de minden hibas metodus invokolas illegal argra v statere vezetheto vissza, de vannak mas standarden haszn exck bizonyos illegal argokra es statekre. ha a hivo nullt ad be vmilyen paramba amelyre a null valuek nem megengedettek, konv szerint NPEt kell dodni es nem IllegalArgumentExceptiont. hasonloan ha a hivo rangen kivuli valuet ad be egy olyan paramba ami egy seq indexet repr, akkor IndexOutOfBoundsExceptiont kell dobni es nem IllegalArgumentExceptiont

egy masik reusable exc a ConcurrentModificationException. akkor kell dobni, ha egy obj, amit ugy designoltak h csak egy thread haszn (v ext sync mellett), detektalja h ot conc modifoljak. ez az exc legjobb esetben is csak egy hint, mivel conc modifot lehetetlen reliably detektalni

meg egy emlitesre melto standard exc az UnsupportedOperationException. ezt kell dobni, ha egy obj nem tam egy megkiserelt opert. ritkan haszn, mivel a legtobb obj minden metodusat tam. ezt az exct olyan classok haszn, amelyek nem impl egyes optional opereket amelyeket az altaluk impl iface def. pl. egy append-only List impl ezt az exct dobna ha vki megprobalna elementet torolni a listabol

ne reusoljuk direktben Exceptiont, RuntimeExceptiont, Throwablet v Errort. kezeljuk ezeket a classokat ugy mintha abstractok lennenek. ezeket az exckat nem lehet reliably csekkelni, mivel superclassai mas excknak amelyeket a metodusok dobhatnak

ezek a leggyakrabban reusolt exck, de masokat is lehet reusolni ha olyanok a korulmenyek. pl. ArithmeticException v NumberFormatException haszn appropriate ha aritm objkat implunk, mint pl komplex v rac szamok. ha egy exc megfelel arra amire szuksegunk van, akkor nyugodtan haszn, de csak ha a conditionok amelyek mellett dobnank, konz az exc docjaval: a reusolasnak a doc semanticson kell alapulnia, nem csupan a neven. ezenkivul lehet standard excket subclassolni is, ha tobb detailt akarunk hozzaadni (item 75), de emlekezzunk ra h az exck serializablek (ch 12). ez onmagaban eleg indok arra h ne irjunk sajat exc classt hacsak nincs ra jo okunk

azt kival h melyik exct fogjuk reusolni, trukkos lehet, mert a fent felsoroltak nem mutually exclusivok. pl. ha egy obj egy kartyapaklit repr, es van egy metodus ami ad egy leosztast a paklibol, argkent atveve a leosztas meretet. ha a hivo a pakli aktualis meretenel nagyobb szamot ad be, akkor az exc lehet IllegalArgumentException (handSize param tul nagy) v IllegalStateException is (pakliban tul keves kartya van). ilyen korulm kozt a szabaly h IllegalStateExceptiont kell dobni "if no argument values would have worked", egyebkent IllegalArgumentExceptiont 