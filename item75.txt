ITEM 75: INCLUDE FAILURE-CAPTURE INFORMATION IN DETAIL MESSAGES

ha egy prg el nem kapott exc miatt failel, a sys autom kiirja az exc stacktracet. a stacktrace tart az exc string reprjat, a toString() metodus invokolas eredmenyet. ez tip tart az exc class nevet, es a detail msgt. gyakran ez az egyetlen info ami a prgozok v a site reliability engineerek rendelkezesere alla mikor vmi sw failuret nyomoznak. ha a failure nem egyszeruen reprodukahato, akkor nehez v lehetetlen ennel tobb infot szerezni. ezert kritikus h az exc toString() metodusa a leheto legtobb infot returnolje a failure causerol. maskent, az exc detail msgnek capturolnie kell a failuret, kesobbi ana celjabol

failure capturolesehez az exc detail msgnek tart kell minden param es field valuet ami contributalt az exckhoz. pl. egy IndexOutOfBoundsException detail msgnek tart kell a lower/upper boundokat es az index valuet ami nem esett a boundok koze. ez az info sokat elarul a filurerol. a harom value bmelyike v mind lehet rossz. az index lehet eggyel kevesebb mint a lower bound v equal az upper bounddal ("fencepost error") v vmi nagyon messze kilogo ertek bmelyik iranyban. lower bound lehet nagyobb mint az upper bound (komoly internal invar failure). ezen esetek mindegyike mas problemat jelent, es a diagnt nagyban segiti ha tudjuk, h milyen errorral van dolgunk

caveat: secu-sensitive info. mivel a stacktraceket szamos ember latja a sw problemak diagn es fixalasa soran, ne tegyunk pwdket, encrypt keyeket es hasonlokat a detail msgkbe

kritikus beletenni minden relevans datat egy exc detail msgbe, de alt nem fontos h tul sok szoveg legyen benne. a stacktracet a doccal es ha szukseges, akkor src koddal egyutt fogjak analizalni. alt tart a pontos filet es line nrt ahonnan az exc dobodott, vmint a stacken levo osszes tobbi metodus invocationhoz tart filet es line nrt. a failure hosszas szoveges leirasa felesleges; az info kinyerheto a docbol es a src kodbol

exc detail msg nem keverendo a user-level error msgel, amelynek erthetonek kell lennie az end user szamara. a user-level error msgel ellentetben a detail msg elsosorban a prgozoknak es a site reliability engineereknek szol, a failure anahoz. ezert az infotartalom sokkal fontosabb mint a readability. user-level error msgk gyakran localizedek, mig az exc detail msgk ritkan azok

egy mod annak biztra, h az exck megfelelo failure-capture infot tartsanak a detail msgukben, "to require this information in their constructors instead of a string detail message". a detail msg aztan generalhato h includolja ezt az infot. pl. Stringet atvevo konstr helyett az IndexOutOfBoundsExceptionban lehetne egy ilyen konstr
public IndexOutOfBoundsException(int lowerBound, int upperBound, int index) { super(String.format("Lower bound: %d, Upper bound: %d, Index: %d", lowerBound, upperBound, index)); this.lowerBound = ...

Java 9-ben IndexOutOfBoundsExceptionba vegre bekerult egy konstr ami egy index int paramot vesz at, de a boundokat tovabbra sem. alt elmondhato h a Java libek nem haszn ezt az idiomot, pedig ajanlott lenne. sokkal egyszerubbe tenne az exct dobo prgozo szamara a failure capturet. sot, nehezze teszi a prgozo szamara h NE capturolje a failuret. az idiom lenyegeben centralizalja a detail msgt generalo kodot az exc classban, es nem a class usereitol varja h redundansan generaljak a detail msgt

item 70 szerint appropriate lehet ha egy exc accessor metodusokat nyujt a failure-capture infojahoz (fenti peldaban lowerBound, upperBound, index). checked excknel ez fontosabb mint uncheckedeknel, mert a failure-capture info hasznos lehet a failurebol valo recovereleshez. ritka (de nem elkepzelhetetlen) h egy prgozo accessalni akarja egy unchecked exc detailjeit. unchecked exckhoz is tanacsos lehet nyujtani ezeket az accessorokat "on general principle" (item 12)
